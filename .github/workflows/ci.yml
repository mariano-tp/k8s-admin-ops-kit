name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up KinD cluster
        uses: helm/kind-action@v1.9.0
        with:
          cluster_name: kind
      
      - name: Verify cluster is running
        run: |
          kubectl cluster-info
          kubectl get nodes
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      
      - name: Create namespace
        run: |
          kubectl create namespace bot --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Helm lint chart
        run: |
          helm lint ./helm/bot-platform
      
      - name: Helm install chart
        run: |
          helm upgrade --install bot-platform ./helm/bot-platform \
            -n bot \
            --wait \
            --timeout 5m \
            --debug
      
      - name: Check deployment status
        run: |
          echo "=== Deployments ==="
          kubectl get deployments -n bot
          echo "=== Pods ==="
          kubectl get pods -n bot
          echo "=== Services ==="
          kubectl get svc -n bot
      
      - name: Wait for deployments
        run: |
          # Esperar cada deployment individualmente y mostrar estado
          for deploy in api worker nlp; do
            echo "Waiting for bot-platform-${deploy}..."
            kubectl wait --for=condition=available \
              --timeout=180s \
              deployment/bot-platform-${deploy} \
              -n bot || {
                echo "Failed to deploy ${deploy}, checking logs..."
                kubectl describe deployment bot-platform-${deploy} -n bot
                kubectl logs -n bot -l app=bot-platform-${deploy} --tail=50
              }
          done
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible kubernetes
          ansible-galaxy collection install kubernetes.core
      
      - name: Test Ansible playbook (dry-run)
        run: |
          # Ansible usa el kubeconfig default que ya está configurado
          ansible-playbook ansible/playbooks/restart-platform.yml \
            -e namespace=bot \
            -e kubeconfig=~/.kube/config \
            --check \
            -vv
      
      - name: Run smoke tests
        run: |
          # Hacer el script ejecutable si no lo es
          chmod +x ./scripts/smoke.sh || true
          # Ejecutar smoke test solo si existe
          if [ -f "./scripts/smoke.sh" ]; then
            ./scripts/smoke.sh
          else
            echo "Smoke test script not found, skipping..."
            # Test básico de conectividad
            kubectl run test-curl --image=curlimages/curl:latest \
              --rm -i --restart=Never \
              -n bot \
              -- curl -s http://bot-platform-api:8080/health || true
          fi
      
      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Describing failed pods ==="
          kubectl get pods -n bot --no-headers | grep -v Running | while read pod _; do
            echo "Pod: $pod"
            kubectl describe pod $pod -n bot
            echo "---"
            kubectl logs $pod -n bot --tail=100 || true
            echo "=========="
          done
